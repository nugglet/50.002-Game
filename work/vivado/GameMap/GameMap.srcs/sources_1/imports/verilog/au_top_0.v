/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg map_led0,
    output reg map_led1,
    output reg map_led2,
    output reg map_led3,
    output reg map_led4,
    output reg map_led5,
    output reg playerled,
    output reg usb_tx,
    input [4:0] io_button
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_detectLeft_out;
  reg [1-1:0] M_detectLeft_in;
  edge_detector_2 detectLeft (
    .clk(clk),
    .in(M_detectLeft_in),
    .out(M_detectLeft_out)
  );
  wire [1-1:0] M_detectRight_out;
  reg [1-1:0] M_detectRight_in;
  edge_detector_2 detectRight (
    .clk(clk),
    .in(M_detectRight_in),
    .out(M_detectRight_out)
  );
  wire [1-1:0] M_startReset_out;
  reg [1-1:0] M_startReset_in;
  edge_detector_2 startReset (
    .clk(clk),
    .in(M_startReset_in),
    .out(M_startReset_out)
  );
  wire [1-1:0] M_condLeft_out;
  reg [1-1:0] M_condLeft_in;
  button_conditioner_3 condLeft (
    .clk(clk),
    .in(M_condLeft_in),
    .out(M_condLeft_out)
  );
  wire [1-1:0] M_condRight_out;
  reg [1-1:0] M_condRight_in;
  button_conditioner_3 condRight (
    .clk(clk),
    .in(M_condRight_in),
    .out(M_condRight_out)
  );
  wire [1-1:0] M_condReset_out;
  reg [1-1:0] M_condReset_in;
  button_conditioner_3 condReset (
    .clk(clk),
    .in(M_condReset_in),
    .out(M_condReset_out)
  );
  wire [16-1:0] M_gameCPU_map0_led;
  wire [16-1:0] M_gameCPU_map1_led;
  wire [16-1:0] M_gameCPU_map2_led;
  wire [16-1:0] M_gameCPU_map3_led;
  wire [16-1:0] M_gameCPU_map4_led;
  wire [16-1:0] M_gameCPU_map5_led;
  wire [16-1:0] M_gameCPU_player_led;
  reg [1-1:0] M_gameCPU_left_button;
  reg [1-1:0] M_gameCPU_right_button;
  reg [1-1:0] M_gameCPU_start_reset;
  beta_4 gameCPU (
    .clk(clk),
    .rst(rst),
    .left_button(M_gameCPU_left_button),
    .right_button(M_gameCPU_right_button),
    .start_reset(M_gameCPU_start_reset),
    .map0_led(M_gameCPU_map0_led),
    .map1_led(M_gameCPU_map1_led),
    .map2_led(M_gameCPU_map2_led),
    .map3_led(M_gameCPU_map3_led),
    .map4_led(M_gameCPU_map4_led),
    .map5_led(M_gameCPU_map5_led),
    .player_led(M_gameCPU_player_led)
  );
  
  wire [144-1:0] M_playerpos_playerled;
  reg [16-1:0] M_playerpos_player;
  initialise_player_LED_5 playerpos (
    .player(M_playerpos_player),
    .playerled(M_playerpos_playerled)
  );
  
  wire [168-1:0] M_columns_col0_led;
  wire [168-1:0] M_columns_col1_led;
  wire [168-1:0] M_columns_col2_led;
  wire [168-1:0] M_columns_col3_led;
  wire [168-1:0] M_columns_col4_led;
  wire [168-1:0] M_columns_col5_led;
  reg [16-1:0] M_columns_col0;
  reg [16-1:0] M_columns_col1;
  reg [16-1:0] M_columns_col2;
  reg [16-1:0] M_columns_col3;
  reg [16-1:0] M_columns_col4;
  reg [16-1:0] M_columns_col5;
  initialise_col_LED_6 columns (
    .col0(M_columns_col0),
    .col1(M_columns_col1),
    .col2(M_columns_col2),
    .col3(M_columns_col3),
    .col4(M_columns_col4),
    .col5(M_columns_col5),
    .col0_led(M_columns_col0_led),
    .col1_led(M_columns_col1_led),
    .col2_led(M_columns_col2_led),
    .col3_led(M_columns_col3_led),
    .col4_led(M_columns_col4_led),
    .col5_led(M_columns_col5_led)
  );
  
  wire [3-1:0] M_player_led_pixel;
  wire [1-1:0] M_player_led_led;
  reg [1-1:0] M_player_led_update;
  reg [24-1:0] M_player_led_color;
  ws2812b_writer_7 player_led (
    .clk(clk),
    .rst(rst),
    .update(M_player_led_update),
    .color(M_player_led_color),
    .pixel(M_player_led_pixel),
    .led(M_player_led_led)
  );
  
  wire [3-1:0] M_col_0_led_pixel;
  wire [1-1:0] M_col_0_led_led;
  reg [1-1:0] M_col_0_led_update;
  reg [24-1:0] M_col_0_led_color;
  ws2812b_writer_7 col_0_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_0_led_update),
    .color(M_col_0_led_color),
    .pixel(M_col_0_led_pixel),
    .led(M_col_0_led_led)
  );
  
  wire [3-1:0] M_col_1_led_pixel;
  wire [1-1:0] M_col_1_led_led;
  reg [1-1:0] M_col_1_led_update;
  reg [24-1:0] M_col_1_led_color;
  ws2812b_writer_7 col_1_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_1_led_update),
    .color(M_col_1_led_color),
    .pixel(M_col_1_led_pixel),
    .led(M_col_1_led_led)
  );
  
  wire [3-1:0] M_col_2_led_pixel;
  wire [1-1:0] M_col_2_led_led;
  reg [1-1:0] M_col_2_led_update;
  reg [24-1:0] M_col_2_led_color;
  ws2812b_writer_7 col_2_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_2_led_update),
    .color(M_col_2_led_color),
    .pixel(M_col_2_led_pixel),
    .led(M_col_2_led_led)
  );
  
  wire [3-1:0] M_col_3_led_pixel;
  wire [1-1:0] M_col_3_led_led;
  reg [1-1:0] M_col_3_led_update;
  reg [24-1:0] M_col_3_led_color;
  ws2812b_writer_7 col_3_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_3_led_update),
    .color(M_col_3_led_color),
    .pixel(M_col_3_led_pixel),
    .led(M_col_3_led_led)
  );
  
  wire [3-1:0] M_col_4_led_pixel;
  wire [1-1:0] M_col_4_led_led;
  reg [1-1:0] M_col_4_led_update;
  reg [24-1:0] M_col_4_led_color;
  ws2812b_writer_7 col_4_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_4_led_update),
    .color(M_col_4_led_color),
    .pixel(M_col_4_led_pixel),
    .led(M_col_4_led_led)
  );
  
  wire [3-1:0] M_col_5_led_pixel;
  wire [1-1:0] M_col_5_led_led;
  reg [1-1:0] M_col_5_led_update;
  reg [24-1:0] M_col_5_led_color;
  ws2812b_writer_7 col_5_led (
    .clk(clk),
    .rst(rst),
    .update(M_col_5_led_update),
    .color(M_col_5_led_color),
    .pixel(M_col_5_led_pixel),
    .led(M_col_5_led_led)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    M_condLeft_in = io_button[3+0-:1];
    M_condRight_in = io_button[1+0-:1];
    M_condReset_in = io_button[0+0-:1];
    M_detectLeft_in = M_condLeft_out;
    M_detectRight_in = M_condRight_out;
    M_startReset_in = M_condReset_out;
    M_gameCPU_left_button = M_detectLeft_out;
    M_gameCPU_right_button = M_detectRight_out;
    M_gameCPU_start_reset = M_startReset_out;
    M_player_led_update = 1'h1;
    M_col_0_led_update = 1'h1;
    M_col_1_led_update = 1'h1;
    M_col_2_led_update = 1'h1;
    M_col_3_led_update = 1'h1;
    M_col_4_led_update = 1'h1;
    M_col_5_led_update = 1'h1;
    M_columns_col0 = M_gameCPU_map0_led;
    M_columns_col1 = M_gameCPU_map1_led;
    M_columns_col2 = M_gameCPU_map2_led;
    M_columns_col3 = M_gameCPU_map3_led;
    M_columns_col4 = M_gameCPU_map4_led;
    M_columns_col5 = M_gameCPU_map5_led;
    M_playerpos_player = M_gameCPU_player_led;
    M_col_0_led_color = M_columns_col0_led[(M_col_0_led_pixel)*24+23-:24];
    M_col_1_led_color = M_columns_col1_led[(M_col_1_led_pixel)*24+23-:24];
    M_col_2_led_color = M_columns_col2_led[(M_col_2_led_pixel)*24+23-:24];
    M_col_3_led_color = M_columns_col3_led[(M_col_3_led_pixel)*24+23-:24];
    M_col_4_led_color = M_columns_col4_led[(M_col_4_led_pixel)*24+23-:24];
    M_col_5_led_color = M_columns_col5_led[(M_col_5_led_pixel)*24+23-:24];
    M_player_led_color = M_playerpos_playerled[(M_player_led_pixel)*24+23-:24];
    map_led0 = M_col_0_led_led;
    map_led1 = M_col_1_led_led;
    map_led2 = M_col_2_led_led;
    map_led3 = M_col_3_led_led;
    map_led4 = M_col_4_led_led;
    map_led5 = M_col_5_led_led;
    playerled = M_player_led_led;
  end
endmodule
